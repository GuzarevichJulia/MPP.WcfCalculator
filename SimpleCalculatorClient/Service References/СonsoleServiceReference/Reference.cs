//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SimpleCalculatorClient.СonsoleServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DivideByZeroFault", Namespace="http://schemas.datacontract.org/2004/07/SimpleWcfService")]
    [System.SerializableAttribute()]
    public partial class DivideByZeroFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RootOfNegativeNumberFault", Namespace="http://schemas.datacontract.org/2004/07/SimpleWcfService")]
    [System.SerializableAttribute()]
    public partial class RootOfNegativeNumberFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="СonsoleServiceReference.ISimpleCalculatorService")]
    public interface ISimpleCalculatorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleCalculatorService/Add", ReplyAction="http://tempuri.org/ISimpleCalculatorService/AddResponse")]
        double Add(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleCalculatorService/Add", ReplyAction="http://tempuri.org/ISimpleCalculatorService/AddResponse")]
        System.Threading.Tasks.Task<double> AddAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleCalculatorService/Substract", ReplyAction="http://tempuri.org/ISimpleCalculatorService/SubstractResponse")]
        double Substract(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleCalculatorService/Substract", ReplyAction="http://tempuri.org/ISimpleCalculatorService/SubstractResponse")]
        System.Threading.Tasks.Task<double> SubstractAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleCalculatorService/Multiply", ReplyAction="http://tempuri.org/ISimpleCalculatorService/MultiplyResponse")]
        double Multiply(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleCalculatorService/Multiply", ReplyAction="http://tempuri.org/ISimpleCalculatorService/MultiplyResponse")]
        System.Threading.Tasks.Task<double> MultiplyAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleCalculatorService/Divide", ReplyAction="http://tempuri.org/ISimpleCalculatorService/DivideResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SimpleCalculatorClient.СonsoleServiceReference.DivideByZeroFault), Action="http://tempuri.org/ISimpleCalculatorService/DivideDivideByZeroFaultFault", Name="DivideByZeroFault", Namespace="http://schemas.datacontract.org/2004/07/SimpleWcfService")]
        double Divide(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleCalculatorService/Divide", ReplyAction="http://tempuri.org/ISimpleCalculatorService/DivideResponse")]
        System.Threading.Tasks.Task<double> DivideAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleCalculatorService/Sqrt", ReplyAction="http://tempuri.org/ISimpleCalculatorService/SqrtResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SimpleCalculatorClient.СonsoleServiceReference.RootOfNegativeNumberFault), Action="http://tempuri.org/ISimpleCalculatorService/SqrtRootOfNegativeNumberFaultFault", Name="RootOfNegativeNumberFault", Namespace="http://schemas.datacontract.org/2004/07/SimpleWcfService")]
        double Sqrt(double a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleCalculatorService/Sqrt", ReplyAction="http://tempuri.org/ISimpleCalculatorService/SqrtResponse")]
        System.Threading.Tasks.Task<double> SqrtAsync(double a);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISimpleCalculatorServiceChannel : SimpleCalculatorClient.СonsoleServiceReference.ISimpleCalculatorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SimpleCalculatorServiceClient : System.ServiceModel.ClientBase<SimpleCalculatorClient.СonsoleServiceReference.ISimpleCalculatorService>, SimpleCalculatorClient.СonsoleServiceReference.ISimpleCalculatorService {
        
        public SimpleCalculatorServiceClient() {
        }
        
        public SimpleCalculatorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SimpleCalculatorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SimpleCalculatorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SimpleCalculatorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Add(double a, double b) {
            return base.Channel.Add(a, b);
        }
        
        public System.Threading.Tasks.Task<double> AddAsync(double a, double b) {
            return base.Channel.AddAsync(a, b);
        }
        
        public double Substract(double a, double b) {
            return base.Channel.Substract(a, b);
        }
        
        public System.Threading.Tasks.Task<double> SubstractAsync(double a, double b) {
            return base.Channel.SubstractAsync(a, b);
        }
        
        public double Multiply(double a, double b) {
            return base.Channel.Multiply(a, b);
        }
        
        public System.Threading.Tasks.Task<double> MultiplyAsync(double a, double b) {
            return base.Channel.MultiplyAsync(a, b);
        }
        
        public double Divide(double a, double b) {
            return base.Channel.Divide(a, b);
        }
        
        public System.Threading.Tasks.Task<double> DivideAsync(double a, double b) {
            return base.Channel.DivideAsync(a, b);
        }
        
        public double Sqrt(double a) {
            return base.Channel.Sqrt(a);
        }
        
        public System.Threading.Tasks.Task<double> SqrtAsync(double a) {
            return base.Channel.SqrtAsync(a);
        }
    }
}
